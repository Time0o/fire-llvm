#!/usr/bin/env python3

import os
import subprocess
import sys


TEST_CASES = {
    'hello': [
        (['--msg', 'hello world'], 'hello world')
    ],
    'add': [
        (['-a=1', '-b=2'], '3')
    ],
    'flag': [
        ([], '0'),
        (['-f'], '1')
    ],
    'default_arg': [
        ([], '0'),
        (['-d=1'], '1')
    ],
    'optional': [
        ([], 'opt = nothing'),
        (['--opt=1'], 'opt = 1')
    ],
    'variadic': [
        ([], 'variadic = {}'),
        (['1', '2', '3'], 'variadic = {1, 2, 3}')
    ],
    'class': [
        (['hello', '--msg', 'hello world'], 'hello world'),
        (['add', '-a=1', '-b=2'], '3'),
        (['flag'], '0'),
        (['flag', '-f'], '1'),
        (['default_arg'], '0'),
        (['default_arg', '-d=1'], '1'),
        (['optional'], 'opt = nothing'),
        (['optional', '--opt=1'], 'opt = 1'),
        (['variadic'], 'variadic = {}'),
        (['variadic', '1', '2', '3'], 'variadic = {1, 2, 3}')
    ]
}


def check_test_output(test_process, expected_output):
    test_output = test_process.stdout.rstrip()

    assert test_output == expected_output, f"{test_output} vs. {expected_output}"


def run_test(test_binary):
    test = os.path.basename(test_binary)

    for args, expected_output in TEST_CASES[test]:
        test_process = subprocess.run([test_binary] + args,
                                      check=True,
                                      capture_output=True,
                                      encoding='UTF-8')

        check_test_output(test_process, expected_output)


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: {} TEST_BINARY".format(sys.argv[0]), file=sys.stderr)
        sys.exit(1)

    run_test(sys.argv[1])
